(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;

{$mode objfpc}{$H+}

{$define example_FUNCTION_WRAPPER}
{$define example_CLASS_WRAPPER}

interface

uses 
     Classes,
     SysUtils;

type

  PSimple = pointer;

  function New_Simple (): PSimple; stdcall;

  procedure Delete_Simple ( self: PSimple); stdcall;

  procedure Simple_move ( self: PSimple; dx, dy: Double); stdcall;

{$ifdef example_CLASS_WRAPPER}

type

Simple = class (TObject)

 private
    FCObjPtr : PSimple;
    FOwnCObjPtr : boolean;

 protected
    procedure SetCObjPtr(Value : PSimple);

 public
    constructor Create ();overload; 

    procedure SetX ( value: Double);
    function GetX (): Double;
    property X : Double read GetX write SetX;

    procedure SetY ( value: Double);
    function GetY (): Double;
    property Y : Double read GetY write SetY;

    procedure move ( dx: Double;  dy: Double);

    destructor Destroy; override;

    property CObjPtr : PSimple read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  end;
{$endif} //example_CLASS_WRAPPER

{$ifdef example_FUNCTION_WRAPPER}

// Functions Wrapper 


  procedure Simple_x_set ( self: PSimple; x: Double); stdcall;

  function Simple_x_get ( self: PSimple): Double; stdcall;

  procedure Simple_y_set ( self: PSimple; y: Double); stdcall;

  function Simple_y_get ( self: PSimple): Double; stdcall;

{$endif} //example_FUNCTION_WRAPPER

// Output a Pascal type wrapper class for each SWIG type

implementation

{$ifdef example_FUNCTION_WRAPPER}

{$IFDEF LINUX}
{$linklib libexample.so}
const __DLLNAME= 'libexample.so';
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}
{$IFDEF MSWINDOWS}
const __DLLNAME= 'example.dll';
const __WRAPDLLNAME= 'example_wrap.dll';
{$ENDIF}
{$IFDEF HAIKU}
const __DLLNAME= 'libexample.so';
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}
{$IFDEF QTOPIA}
const __DLLNAME= 'libexample.so';
const __WRAPDLLNAME= 'libexample_wrap.so';

{$ENDIF}
{$IFDEF DARWIN}
const __DLLNAME= '';
const __WRAPDLLNAME= '';
{$LINKFRAMEWORK example}
{$ENDIF}

  function New_Simple (): PSimple; stdcall; external __WRAPDLLNAME name 'new_Simple';

  procedure Delete_Simple ( self: PSimple); stdcall; external __WRAPDLLNAME name 'delete_Simple';

  procedure Simple_move ( self: PSimple;  dx, dy: Double); stdcall; external __WRAPDLLNAME name 'Simple_move';

  procedure Simple_x_set ( self: PSimple; x: Double); stdcall; external __WRAPDLLNAME name 'Simple_x_set';

  function Simple_x_get ( self: PSimple): Double; stdcall; external __WRAPDLLNAME name 'Simple_x_get';

  procedure Simple_y_set ( self: PSimple; y: Double); stdcall; external __WRAPDLLNAME name 'Simple_y_set';

  function Simple_y_get ( self: PSimple): Double; stdcall; external __WRAPDLLNAME name 'Simple_y_get';

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

constructor Simple.Create ();
begin
  inherited Create;
  FOwnCObjPtr := true;
  FCObjPtr := example.New_Simple();
end;

procedure Simple.SetX ( value: Double);
begin
  assert(FCObjPtr <> nil);
  example.Simple_x_set(Self.FCObjPtr, value);
end;

function Simple.GetX (): Double;begin
  assert(FCObjPtr <> nil);
  Result := example.Simple_x_get(Self.FCObjPtr) ;
end;

procedure Simple.SetY ( value: Double);
begin
  assert(FCObjPtr <> nil);
  example.Simple_y_set(Self.FCObjPtr, value);
end;

function Simple.GetY (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Simple_y_get(Self.FCObjPtr) ;
end;

procedure Simple.move ( dx: Double;  dy: Double);
begin
  assert(FCObjPtr <> nil);
  example.Simple_move(Self.FCObjPtr, dx, dy);
end;


destructor Simple.Destroy; 
begin
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Simple(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure Simple.SetCObjPtr(Value : PSimple);
begin
  if (Value <> FCObjPtr) then begin
	if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
		example.delete_Simple(FCObjPtr);
	end;
	FCObjPtr := Value;
  end;
end;

{$endif} //example_CLASS_WRAPPER

initialization

finalization

end.
