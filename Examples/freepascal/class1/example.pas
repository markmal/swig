(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;

{$mode objfpc}{$H+}

{$define example_FUNCTION_WRAPPER}
{$define example_CLASS_WRAPPER}

interface

uses 

// interface_uses


     Classes,
     SysUtils;


// interface_uses



// interface_type_begin 


//pasraw_intf.f

type
  CPSimple = pointer;

// interface_type_end 



// interface_functions

  function New_Simple( ):CPSimple; stdcall;

  procedure Delete_Simple( self:CPSimple ); stdcall;

  procedure Simple_move( self:CPSimple;  dx, dy:Double ); stdcall;

{$ifdef example_FUNCTION_WRAPPER}

// interface_functions_wrapper

  procedure Simple_x_set( self:CPSimple; x:Double ); stdcall;

  function Simple_x_get( self:CPSimple ):Double; stdcall;

  procedure Simple_y_set( self:CPSimple; y:Double ); stdcall;

  function Simple_y_get( self:CPSimple ):Double; stdcall;

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

type

  TSimple = class (TObject)

    private
      FCObjPtr : CPSimple;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : CPSimple);
    
    public

    constructor Create ();overload; 

    procedure SetX ( value: Double);

    function GetX (): Double;

 public                  
	property X : Double read GetX write SetX;

    procedure SetY ( value: Double);

    function GetY (): Double;

 public                  
	property Y : Double read GetY write SetY;

    procedure move ( dx: Double;  dy: Double);

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : CPSimple read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end; {TSimple}

{$endif} //example_CLASS_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


// implementation_type_begin



// implementation_uses

// implementation_type_end

// implementation_functions

{$IFDEF LINUX}
//{ $ linklib libexample.so }
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF MSWINDOWS}
{$linklib example.dll}
const __WRAPDLLNAME= 'example_wrap.dll';
{$ENDIF}

{$IFDEF HAIKU}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF QTOPIA}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF DARWIN}
{$linklib example}
const __WRAPDLLNAME= '';
{$LINKFRAMEWORK example}
{$ENDIF}
 


  function New_Simple( ):CPSimple; stdcall; external __WRAPDLLNAME name 'new_Simple';

  procedure Delete_Simple( self:CPSimple ); stdcall; external __WRAPDLLNAME name 'delete_Simple';

  procedure Simple_move( self:CPSimple;  dx, dy:Double ); stdcall; external __WRAPDLLNAME name 'Simple_move';

{$ifdef example_FUNCTION_WRAPPER}

// implementation_functions_wrapper

  procedure Simple_x_set( self:CPSimple; x:Double ); stdcall; external __WRAPDLLNAME name 'Simple_x_set';

  function Simple_x_get( self:CPSimple ):Double; stdcall; external __WRAPDLLNAME name 'Simple_x_get';

  procedure Simple_y_set( self:CPSimple; y:Double ); stdcall; external __WRAPDLLNAME name 'Simple_y_set';

  function Simple_y_get( self:CPSimple ):Double; stdcall; external __WRAPDLLNAME name 'Simple_y_get';

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

constructor TSimple.Create ();
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Simple();
end;

procedure TSimple.SetX ( value: Double);
begin
  assert(FCObjPtr <> nil);
 example.Simple_x_set(Self.FCObjPtr, value);
end;

function TSimple.GetX (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Simple_x_get(Self.FCObjPtr) ;
end;

procedure TSimple.SetY ( value: Double);
begin
  assert(FCObjPtr <> nil);
 example.Simple_y_set(Self.FCObjPtr, value);
end;

function TSimple.GetY (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Simple_y_get(Self.FCObjPtr) ;
end;

procedure TSimple.move ( dx: Double;  dy: Double);
begin
  assert(FCObjPtr <> nil);
 example.Simple_move(Self.FCObjPtr, dx, dy);
end;

destructor TSimple.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Simple(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TSimple.SetCObjPtr(Value : CPSimple);
begin
  if (Value <> FCObjPtr) then begin
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Simple(FCObjPtr);
  end;
  FCObjPtr := Value;
  end;
end;


{$endif} //example_CLASS_WRAPPER

initialization


// constant_initialization

// initialization


finalization

// finalization


end.
