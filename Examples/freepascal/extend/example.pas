(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;

{$mode objfpc}{$H+}

{$define example_FUNCTION_WRAPPER}
{$define example_CLASS_WRAPPER}

interface

uses 

// interface_uses


     Classes,
     SysUtils;


// interface_uses



// interface_type_begin 


//pasraw_intf.f

type
  CPEmployee = pointer;

type
  CPManager = pointer;

type
  CPEmployeeList = pointer;

// interface_type_end 



// interface_functions

  function New_Employee( n:PChar ):CPEmployee; stdcall;

  function Employee_getTitle( self:CPEmployee ):PChar; stdcall;

  function Employee_getName( self:CPEmployee ):PChar; stdcall;

  function Employee_getPosition( self:CPEmployee ):PChar; stdcall;

  procedure Delete_Employee( self:CPEmployee ); stdcall;

  function New_Manager( n:PChar ):CPManager; stdcall;

  function Manager_getPosition( self:CPManager ):PChar; stdcall;

  procedure Delete_Manager( self:CPManager ); stdcall;

  function New_EmployeeList( ):CPEmployeeList; stdcall;

  procedure EmployeeList_addEmployee( self:CPEmployeeList;  p:CPEmployee ); stdcall;

  function EmployeeList_get_item( self:CPEmployeeList; i:Integer ):CPEmployee; stdcall;

  procedure Delete_EmployeeList( self:CPEmployeeList ); stdcall;

{$ifdef example_FUNCTION_WRAPPER}

// interface_functions_wrapper

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

type

  TEmployee = class (TObject)

    private
      FCObjPtr : CPEmployee;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : CPEmployee);
    
    public

    constructor Create; overload; virtual;
    constructor Create(CObjPtr:CPEmployee; OwnObj:boolean); overload; 

    constructor Create ( n: PChar);overload; 

    function getTitle (): PChar;virtual; 

    function getName (): PChar;virtual; 

    function getPosition (): PChar;virtual; 

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : CPEmployee read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end; {TEmployee}

  TManager = class (TEmployee) 
    public

    constructor Create ( n: PChar);overload; 

    function getPosition (): PChar;override; 

    destructor Destroy; override;

  //various other methods
  //proxy class methods
  end; {TManager}

  TEmployeeList = class (TObject)

    private
      FCObjPtr : CPEmployeeList;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : CPEmployeeList);
    
    public

    constructor Create ();overload; 

    procedure addEmployee ( p: TEmployee);

    function get_item ( i: Integer): TEmployee;

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : CPEmployeeList read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end; {TEmployeeList}

{$endif} //example_CLASS_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


// implementation_type_begin



// implementation_uses

// implementation_type_end

// implementation_functions

{$IFDEF LINUX}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF MSWINDOWS}
{$linklib example.dll}
const __WRAPDLLNAME= 'example_wrap.dll';
{$ENDIF}

{$IFDEF HAIKU}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF QTOPIA}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF DARWIN}
{$linklib example}
const __WRAPDLLNAME= '';
{$LINKFRAMEWORK example}
{$ENDIF}
 


  function New_Employee( n:PChar ):CPEmployee; stdcall; external __WRAPDLLNAME name 'new_Employee';

  function Employee_getTitle( self:CPEmployee ):PChar; stdcall; external __WRAPDLLNAME name 'Employee_getTitle';

  function Employee_getName( self:CPEmployee ):PChar; stdcall; external __WRAPDLLNAME name 'Employee_getName';

  function Employee_getPosition( self:CPEmployee ):PChar; stdcall; external __WRAPDLLNAME name 'Employee_getPosition';

  procedure Delete_Employee( self:CPEmployee ); stdcall; external __WRAPDLLNAME name 'delete_Employee';

  function New_Manager( n:PChar ):CPManager; stdcall; external __WRAPDLLNAME name 'new_Manager';

  function Manager_getPosition( self:CPManager ):PChar; stdcall; external __WRAPDLLNAME name 'Manager_getPosition';

  procedure Delete_Manager( self:CPManager ); stdcall; external __WRAPDLLNAME name 'delete_Manager';

  function New_EmployeeList( ):CPEmployeeList; stdcall; external __WRAPDLLNAME name 'new_EmployeeList';

  procedure EmployeeList_addEmployee( self:CPEmployeeList;  p:CPEmployee ); stdcall; external __WRAPDLLNAME name 'EmployeeList_addEmployee';

  function EmployeeList_get_item( self:CPEmployeeList; i:Integer ):CPEmployee; stdcall; external __WRAPDLLNAME name 'EmployeeList_get_item';

  procedure Delete_EmployeeList( self:CPEmployeeList ); stdcall; external __WRAPDLLNAME name 'delete_EmployeeList';

{$ifdef example_FUNCTION_WRAPPER}

// implementation_functions_wrapper

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

constructor TEmployee.Create ( n: PChar);

begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Employee(n);

end;

function TEmployee.getTitle (): PChar;
begin
  assert(FCObjPtr <> nil);
 Result := example.Employee_getTitle(Self.FCObjPtr);
end;

function TEmployee.getName (): PChar;
begin
  assert(FCObjPtr <> nil);
 Result := example.Employee_getName(Self.FCObjPtr);
end;

function TEmployee.getPosition (): PChar;
begin
  assert(FCObjPtr <> nil);
 Result := example.Employee_getPosition(Self.FCObjPtr);
end;

constructor TEmployee.Create; 
begin
  inherited Create;
  FCObjPtr := nil;
  FOwnCObjPtr := true
end;

constructor TEmployee.Create(CObjPtr:CPEmployee; OwnObj:boolean); 
begin
  inherited Create;
  FCObjPtr := CObjPtr;
  FOwnCObjPtr := OwnObj
end;


destructor TEmployee.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Employee(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TEmployee.SetCObjPtr(Value : CPEmployee);
begin
  if (Value <> FCObjPtr) then begin
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Employee(FCObjPtr);
  end;
  FCObjPtr := Value;
  end;
end;


constructor TManager.Create ( n: PChar);

begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Manager(n);

end;

function TManager.getPosition (): PChar;
begin
  assert(FCObjPtr <> nil);
 Result := example.Manager_getPosition(Self.FCObjPtr);
end;

destructor TManager.Destroy;
begin   
  if (FCObjPtr <> nil) and FOwnCObjPtr then begin 
    example.delete_Manager(FCObjPtr);
    FOwnCObjPtr := false;
  end;  
  FCObjPtr := nil; 
  inherited Destroy;
end;


constructor TEmployeeList.Create ();
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_EmployeeList();
end;

procedure TEmployeeList.addEmployee ( p: TEmployee);

begin
  assert(FCObjPtr <> nil);
 example.EmployeeList_addEmployee(Self.FCObjPtr, p.CObjPtr);

end;

function TEmployeeList.get_item ( i: Integer): TEmployee;
var CPtr : CPEmployee;
begin
  assert(FCObjPtr <> nil);
 
    cPtr := example.EmployeeList_get_item(Self.FCObjPtr, i);
    if cPtr <> nil then
		Result := TEmployee.Create(example.EmployeeList_get_item(Self.FCObjPtr, i), false)
	else
		Result := nil;
;
end;

destructor TEmployeeList.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_EmployeeList(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TEmployeeList.SetCObjPtr(Value : CPEmployeeList);
begin
  if (Value <> FCObjPtr) then begin
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_EmployeeList(FCObjPtr);
  end;
  FCObjPtr := Value;
  end;
end;


{$endif} //example_CLASS_WRAPPER

initialization


// constant_initialization

// initialization


finalization

// finalization


end.
