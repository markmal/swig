(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;

{$mode objfpc}{$H+}

{$define example_FUNCTION_WRAPPER}
{$define example_CLASS_WRAPPER}

interface

uses 

// interface_uses


     Classes,
     SysUtils;


// interface_uses



// interface_type_begin 


//pasraw_intf.f

type
  PEmployee = pointer;

type
  PManager = pointer;

type
  PEmployeeList = pointer;

// interface_type_end 



// interface_functions

  function New_Employee( n:PChar ):PEmployee; stdcall;

  function Employee_getTitle( self:PEmployee ):string; stdcall;

  function Employee_getName( self:PEmployee ):string; stdcall;

  function Employee_getPosition( self:PEmployee ):string; stdcall;

  procedure Delete_Employee( self:PEmployee ); stdcall;

  function New_Manager( n:PChar ):PManager; stdcall;

  function Manager_getPosition( self:PManager ):string; stdcall;

  procedure Delete_Manager( self:PManager ); stdcall;

  function New_EmployeeList( ):PEmployeeList; stdcall;

  procedure EmployeeList_addEmployee( self:PEmployeeList;  p:Employee ); stdcall;

  function EmployeeList_get_item( self:PEmployeeList; i:Integer ):Employee; stdcall;

  procedure Delete_EmployeeList( self:PEmployeeList ); stdcall;

{$ifdef example_FUNCTION_WRAPPER}

// interface_functions_wrapper

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

type

  Employee = class (TObject)

    private
      FCObjPtr : PEmployee;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : PEmployee);
    
    public

    constructor Create; overload; virtual;
    constructor Create(CObjPtr:PEmployee; OwnObj:boolean); overload; 

    constructor Create ( n: PChar);overload; 

    function getTitle (): string;virtual; 

    function getName (): string;virtual; 

    function getPosition (): string;virtual; 

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : PEmployee read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end;
  Manager = class (Employee) 
    public

    constructor Create ( n: PChar);overload; 

    function getPosition (): string;override; 

    destructor Destroy; override;

  //various other methods
  //proxy class methods
  end;
  EmployeeList = class (TObject)

    private
      FCObjPtr : PEmployeeList;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : PEmployeeList);
    
    public

    constructor Create ();overload; 

    procedure addEmployee ( p: Employee);

    function get_item ( i: Integer): Employee;

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : PEmployeeList read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end;
{$endif} //example_CLASS_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


// implementation_type_begin



// implementation_uses

// implementation_type_end

// implementation_functions

{$IFDEF LINUX}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF MSWINDOWS}
{$linklib example.dll}
const __WRAPDLLNAME= 'example_wrap.dll';
{$ENDIF}

{$IFDEF HAIKU}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF QTOPIA}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF DARWIN}
{$linklib example}
const __WRAPDLLNAME= '';
{$LINKFRAMEWORK example}
{$ENDIF}
 


  function New_Employee( n:PChar ):PEmployee; stdcall; external __WRAPDLLNAME name 'new_Employee';

  function Employee_getTitle( self:PEmployee ):string; stdcall; external __WRAPDLLNAME name 'Employee_getTitle';

  function Employee_getName( self:PEmployee ):string; stdcall; external __WRAPDLLNAME name 'Employee_getName';

  function Employee_getPosition( self:PEmployee ):string; stdcall; external __WRAPDLLNAME name 'Employee_getPosition';

  procedure Delete_Employee( self:PEmployee ); stdcall; external __WRAPDLLNAME name 'delete_Employee';

  function New_Manager( n:PChar ):PManager; stdcall; external __WRAPDLLNAME name 'new_Manager';

  function Manager_getPosition( self:PManager ):string; stdcall; external __WRAPDLLNAME name 'Manager_getPosition';

  procedure Delete_Manager( self:PManager ); stdcall; external __WRAPDLLNAME name 'delete_Manager';

  function New_EmployeeList( ):PEmployeeList; stdcall; external __WRAPDLLNAME name 'new_EmployeeList';

  procedure EmployeeList_addEmployee( self:PEmployeeList;  p:Employee ); stdcall; external __WRAPDLLNAME name 'EmployeeList_addEmployee';

  function EmployeeList_get_item( self:PEmployeeList; i:Integer ):Employee; stdcall; external __WRAPDLLNAME name 'EmployeeList_get_item';

  procedure Delete_EmployeeList( self:PEmployeeList ); stdcall; external __WRAPDLLNAME name 'delete_EmployeeList';

{$ifdef example_FUNCTION_WRAPPER}

// implementation_functions_wrapper

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

constructor Employee.Create ( n: PChar);
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Employee(n);

end;

function Employee.getTitle (): string;begin
  assert(FCObjPtr <> nil);
 
    Result := SWIGTYPE_std__string.Create(example.Employee_getTitle(Self.FCObjPtr));
;
end;

function Employee.getName (): string;begin
  assert(FCObjPtr <> nil);
 
    Result := SWIGTYPE_std__string.Create(example.Employee_getName(Self.FCObjPtr));
;
end;

function Employee.getPosition (): string;begin
  assert(FCObjPtr <> nil);
 
    Result := SWIGTYPE_std__string.Create(example.Employee_getPosition(Self.FCObjPtr));
;
end;

constructor Employee.Create; 
begin
  inherited Create;
  FCObjPtr := nil;
  FOwnCObjPtr := true
end;

constructor Employee.Create(CObjPtr:PEmployee; OwnObj:boolean); 
begin
  inherited Create;
  FCObjPtr := CObjPtr;
  FOwnCObjPtr := OwnObj
end;


destructor Employee.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Employee(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure Employee.SetCObjPtr(Value : PEmployee);
    begin
      if (Value <> FCObjPtr) then begin
      if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
        example.delete_Employee(FCObjPtr);
      end;
      FCObjPtr := Value;
      end;
    end;
  

constructor Manager.Create ( n: PChar);
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Manager(n);

end;

function Manager.getPosition (): string;begin
  assert(FCObjPtr <> nil);
 
    Result := SWIGTYPE_std__string.Create(example.Manager_getPosition(Self.FCObjPtr));
;
end;

    destructor Manager.Destroy;
    begin   
      if (FCObjPtr <> nil) and FOwnCObjPtr then begin 
        example.delete_Manager(FCObjPtr);
        FOwnCObjPtr := false;
      end;  
      FCObjPtr := nil; 
      inherited Destroy;
    end;
  

constructor EmployeeList.Create ();begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_EmployeeList();
end;

procedure EmployeeList.addEmployee ( p: Employee);
begin
  assert(FCObjPtr <> nil);
 example.EmployeeList_addEmployee(Self.FCObjPtr, p.CObjPtr);

end;

function EmployeeList.get_item ( i: Integer): Employee;var CPtr : EmployeeList;
begin
  assert(FCObjPtr <> nil);
 
    cPtr := example.EmployeeList_get_item(Self.FCObjPtr, i);
    if cPtr <> nil then
		Result := Employee.Create(example.EmployeeList_get_item(Self.FCObjPtr, i), false)
	else
		Result := nil;
;
end;

destructor EmployeeList.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_EmployeeList(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure EmployeeList.SetCObjPtr(Value : PEmployeeList);
    begin
      if (Value <> FCObjPtr) then begin
      if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
        example.delete_EmployeeList(FCObjPtr);
      end;
      FCObjPtr := Value;
      end;
    end;
  

{$endif} //example_CLASS_WRAPPER

initialization


// constant_initialization

// initialization


finalization

// finalization


end.
