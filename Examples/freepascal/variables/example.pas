(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;

{$mode objfpc}{$H+}
{$define example_FUNCTION_WRAPPER}

{$define example_CLASS_WRAPPER}

interface

uses 

uses swigtypes;

     Classes,
     SysUtils;


uses swigtypes;


//interface_type_begin

//pasraw_intf.f

type

Point = class;

//interface_type_end


  function New_Point (): Point; stdcall;

  procedure Delete_Point ( self: Point); stdcall;

  procedure Ivar_set (ivar: Integer); stdcall;

  function Ivar_get (): Integer; stdcall;

  procedure Svar_set (svar: Smallint); stdcall;

  function Svar_get (): Smallint; stdcall;

  procedure Lvar_set (lvar: Longword); stdcall;

  function Lvar_get (): Longword; stdcall;

  procedure Uivar_set (uivar: Cardinal); stdcall;

  function Uivar_get (): Cardinal; stdcall;

  procedure Usvar_set (usvar: Word); stdcall;

  function Usvar_get (): Word; stdcall;

  procedure Ulvar_set (ulvar: Longint); stdcall;

  function Ulvar_get (): Longint; stdcall;

  procedure Scvar_set (scvar: ShortInt); stdcall;

  function Scvar_get (): ShortInt; stdcall;

  procedure Ucvar_set (ucvar: Byte); stdcall;

  function Ucvar_get (): Byte; stdcall;

  procedure Cvar_set (cvar: Char); stdcall;

  function Cvar_get (): Char; stdcall;

  procedure Fvar_set (fvar: single); stdcall;

  function Fvar_get (): single; stdcall;

  procedure Dvar_set (dvar: Double); stdcall;

  function Dvar_get (): Double; stdcall;

  procedure Strvar_set ( strvar: PChar); stdcall;

  function Strvar_get (): PChar; stdcall;

  function Cstrvar_get (): PChar; stdcall;

  procedure Iptrvar_set ( iptrvar: PInteger); stdcall;

  function Iptrvar_get (): PInteger; stdcall;

  procedure Name_set ( name: PChar); stdcall;

  function Name_get (): PChar; stdcall;

  procedure Ptptr_set ( ptptr: Point); stdcall;

  function Ptptr_get (): Point; stdcall;

  procedure Pt_set ( pt: Point); stdcall;

  function Pt_get (): Point; stdcall;

  function Status_get (): Integer; stdcall;

  function Path_get (): PChar; stdcall;

  procedure Print_vars (); stdcall;

  function New_int (value: Integer): PInteger; stdcall;

  function Make_Point (x, y: Integer): Point; stdcall;

  function Point_print ( p: Point): PChar; stdcall;

  procedure Pt_print (); stdcall;

{$ifdef example_CLASS_WRAPPER}

type
  Point = class 	FCObjPtr : pointer;
	FOwnCObjPtr : boolean;

    procedure SetX ( value: Integer);

    function GetX (): Integer;

    procedure SetY ( value: Integer);

    function GetY (): Integer;

    constructor Create ();overload; 
  // tm_def:
  // no desstructor
  //various other methods
  //proxy class methods
  end;
{$endif} //example_CLASS_WRAPPER

{$ifdef example_FUNCTION_WRAPPER}

// Functions Wrapper 


  procedure Point_x_set ( self: Point;
x: Integer); stdcall;

  function Point_x_get ( self: Point): Integer; stdcall;

  procedure Point_y_set ( self: Point;
y: Integer); stdcall;

  function Point_y_get ( self: Point): Integer; stdcall;

{$endif} //example_FUNCTION_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


{$IFDEF LINUX}
const __DLLNAME= 'libexample.so';


const __WRAPDLLNAME= 'libexample.so';


{$ENDIF}
{$IFDEF MSWINDOWS}
const __DLLNAME= 'example.dll';


const __WRAPDLLNAME= 'example.dll';


{$ENDIF}
{$IFDEF HAIKU}
const __DLLNAME= 'libexample.so';


const __WRAPDLLNAME= 'libexample.so';


{$ENDIF}
{$IFDEF QTOPIA}
const __DLLNAME= 'libexample.so';


const __WRAPDLLNAME= 'libexample.so';


{$ENDIF}
{$IFDEF DARWIN}
const __DLLNAME= '';


const __WRAPDLLNAME= '';


{$LINKFRAMEWORK example}
{$ENDIF}
  function New_Point (): Point; stdcall; external __DLLNAME name 'new_Point';

  procedure Delete_Point ( self: Point); stdcall; external __DLLNAME name 'delete_Point';

  procedure Ivar_set (ivar: Integer); stdcall; external __DLLNAME name 'ivar_set';

  function Ivar_get (): Integer; stdcall; external __DLLNAME name 'ivar_get';

  procedure Svar_set (svar: Smallint); stdcall; external __DLLNAME name 'svar_set';

  function Svar_get (): Smallint; stdcall; external __DLLNAME name 'svar_get';

  procedure Lvar_set (lvar: Longword); stdcall; external __DLLNAME name 'lvar_set';

  function Lvar_get (): Longword; stdcall; external __DLLNAME name 'lvar_get';

  procedure Uivar_set (uivar: Cardinal); stdcall; external __DLLNAME name 'uivar_set';

  function Uivar_get (): Cardinal; stdcall; external __DLLNAME name 'uivar_get';

  procedure Usvar_set (usvar: Word); stdcall; external __DLLNAME name 'usvar_set';

  function Usvar_get (): Word; stdcall; external __DLLNAME name 'usvar_get';

  procedure Ulvar_set (ulvar: Longint); stdcall; external __DLLNAME name 'ulvar_set';

  function Ulvar_get (): Longint; stdcall; external __DLLNAME name 'ulvar_get';

  procedure Scvar_set (scvar: ShortInt); stdcall; external __DLLNAME name 'scvar_set';

  function Scvar_get (): ShortInt; stdcall; external __DLLNAME name 'scvar_get';

  procedure Ucvar_set (ucvar: Byte); stdcall; external __DLLNAME name 'ucvar_set';

  function Ucvar_get (): Byte; stdcall; external __DLLNAME name 'ucvar_get';

  procedure Cvar_set (cvar: Char); stdcall; external __DLLNAME name 'cvar_set';

  function Cvar_get (): Char; stdcall; external __DLLNAME name 'cvar_get';

  procedure Fvar_set (fvar: single); stdcall; external __DLLNAME name 'fvar_set';

  function Fvar_get (): single; stdcall; external __DLLNAME name 'fvar_get';

  procedure Dvar_set (dvar: Double); stdcall; external __DLLNAME name 'dvar_set';

  function Dvar_get (): Double; stdcall; external __DLLNAME name 'dvar_get';

  procedure Strvar_set ( strvar: PChar); stdcall; external __DLLNAME name 'strvar_set';

  function Strvar_get (): PChar; stdcall; external __DLLNAME name 'strvar_get';

  function Cstrvar_get (): PChar; stdcall; external __DLLNAME name 'cstrvar_get';

  procedure Iptrvar_set ( iptrvar: PInteger); stdcall; external __DLLNAME name 'iptrvar_set';

  function Iptrvar_get (): PInteger; stdcall; external __DLLNAME name 'iptrvar_get';

  procedure Name_set ( name: PChar); stdcall; external __DLLNAME name 'name_set';

  function Name_get (): PChar; stdcall; external __DLLNAME name 'name_get';

  procedure Ptptr_set ( ptptr: Point); stdcall; external __DLLNAME name 'ptptr_set';

  function Ptptr_get (): Point; stdcall; external __DLLNAME name 'ptptr_get';

  procedure Pt_set ( pt: Point); stdcall; external __DLLNAME name 'pt_set';

  function Pt_get (): Point; stdcall; external __DLLNAME name 'pt_get';

  function Status_get (): Integer; stdcall; external __DLLNAME name 'status_get';

  function Path_get (): PChar; stdcall; external __DLLNAME name 'path_get';

  procedure Print_vars (); stdcall; external __DLLNAME name 'print_vars';

  function New_int (value: Integer): PInteger; stdcall; external __DLLNAME name 'new_int';

  function Make_Point (x, y: Integer): Point; stdcall; external __DLLNAME name 'make_Point';

  function Point_print ( p: Point): PChar; stdcall; external __DLLNAME name 'Point_print';

  procedure Pt_print (); stdcall; external __DLLNAME name 'pt_print';

{$ifdef example_FUNCTION_WRAPPER}

// Functions Wrapper 


  procedure Point_x_set ( self: Point;
x: Integer); stdcall; external __WRAPDLLNAME name 'Point_x_set';

  function Point_x_get ( self: Point): Integer; stdcall; external __WRAPDLLNAME name 'Point_x_get';

  procedure Point_y_set ( self: Point;
y: Integer); stdcall; external __WRAPDLLNAME name 'Point_y_set';

  function Point_y_get ( self: Point): Integer; stdcall; external __WRAPDLLNAME name 'Point_y_get';

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

procedure Point.SetX ( value: Integer);begin
  assert(FCObjPtr <> nil);
 example.Point_x_set(Self.FCObjPtr, value);
end;

function Point.GetX (): Integer;begin
  assert(FCObjPtr <> nil);
  Result := example.Point_x_get(Self.FCObjPtr) ;
end;

procedure Point.SetY ( value: Integer);begin
  assert(FCObjPtr <> nil);
 example.Point_y_set(Self.FCObjPtr, value);
end;

function Point.GetY (): Integer;begin
  assert(FCObjPtr <> nil);
  Result := example.Point_y_get(Self.FCObjPtr) ;
end;

constructor Point.Create ();begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Point();
end;
  // no desstructor






































{$endif} //example_CLASS_WRAPPER

initialization



// constant initialization



//initialization


finalization


//finalization


end.
