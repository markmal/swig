(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;

{$mode objfpc}{$H+}

{$define example_FUNCTION_WRAPPER}
{$define example_CLASS_WRAPPER}

interface

uses 

// interface_uses


     Classes,
     SysUtils;


// interface_uses



// interface_type_begin 


//pasraw_intf.f

type
  CPPoint = pointer;

// interface_type_end 



// interface_functions

  function New_Point( ):CPPoint; stdcall;

  procedure Delete_Point( self:CPPoint ); stdcall;

  procedure Ivar_set(ivar:Integer ); stdcall;

  function Ivar_get( ):Integer; stdcall;

  procedure Svar_set(svar:Smallint ); stdcall;

  function Svar_get( ):Smallint; stdcall;

  procedure Lvar_set(lvar:Longword ); stdcall;

  function Lvar_get( ):Longword; stdcall;

  procedure Uivar_set(uivar:Cardinal ); stdcall;

  function Uivar_get( ):Cardinal; stdcall;

  procedure Usvar_set(usvar:Word ); stdcall;

  function Usvar_get( ):Word; stdcall;

  procedure Ulvar_set(ulvar:Longint ); stdcall;

  function Ulvar_get( ):Longint; stdcall;

  procedure Scvar_set(scvar:ShortInt ); stdcall;

  function Scvar_get( ):ShortInt; stdcall;

  procedure Ucvar_set(ucvar:Byte ); stdcall;

  function Ucvar_get( ):Byte; stdcall;

  procedure Cvar_set(cvar:Char ); stdcall;

  function Cvar_get( ):Char; stdcall;

  procedure Fvar_set(fvar:single ); stdcall;

  function Fvar_get( ):single; stdcall;

  procedure Dvar_set(dvar:Double ); stdcall;

  function Dvar_get( ):Double; stdcall;

  procedure Strvar_set( strvar:PChar ); stdcall;

  function Strvar_get( ):PChar; stdcall;

  function Cstrvar_get( ):PChar; stdcall;

  procedure Iptrvar_set( iptrvar:PInteger ); stdcall;

  function Iptrvar_get( ):PInteger; stdcall;

  procedure Name_set( name:PChar ); stdcall;

  function Name_get( ):PChar; stdcall;

  procedure Ptptr_set( ptptr:CPPoint ); stdcall;

  function Ptptr_get( ):CPPoint; stdcall;

  procedure Pt_set( pt:CPPoint ); stdcall;

  function Pt_get( ):CPPoint; stdcall;

  function Status_get( ):Integer; stdcall;

  function Path_get( ):PChar; stdcall;

  procedure Print_vars( ); stdcall;

  function New_int(value:Integer ):PInteger; stdcall;

  function Make_Point( x, y:Integer ):CPPoint; stdcall;

  function Point_print( p:CPPoint ):PChar; stdcall;

  procedure Pt_print( ); stdcall;

{$ifdef example_FUNCTION_WRAPPER}

// interface_functions_wrapper

  procedure Point_x_set( self:CPPoint; x:Integer ); stdcall;

  function Point_x_get( self:CPPoint ):Integer; stdcall;

  procedure Point_y_set( self:CPPoint; y:Integer ); stdcall;

  function Point_y_get( self:CPPoint ):Integer; stdcall;

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

type

  TPoint = class (TObject)

    private
      FCObjPtr : CPPoint;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : CPPoint);
    
    public

    procedure SetX ( value: Integer);

    function GetX (): Integer;

 public                  
	property X : Integer read GetX write SetX;

    procedure SetY ( value: Integer);

    function GetY (): Integer;

 public                  
	property Y : Integer read GetY write SetY;

    constructor Create ();overload; 

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : CPPoint read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end; {TPoint}

{$endif} //example_CLASS_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


// implementation_type_begin



// implementation_uses

// implementation_type_end

// implementation_functions

{$IFDEF LINUX}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF MSWINDOWS}
{$linklib example.dll}
const __WRAPDLLNAME= 'example_wrap.dll';
{$ENDIF}

{$IFDEF HAIKU}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF QTOPIA}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF DARWIN}
{$linklib example}
const __WRAPDLLNAME= '';
{$LINKFRAMEWORK example}
{$ENDIF}
 


  function New_Point( ):CPPoint; stdcall; external __WRAPDLLNAME name 'new_Point';

  procedure Delete_Point( self:CPPoint ); stdcall; external __WRAPDLLNAME name 'delete_Point';

  procedure Ivar_set(ivar:Integer ); stdcall; external __WRAPDLLNAME name 'ivar_set';

  function Ivar_get( ):Integer; stdcall; external __WRAPDLLNAME name 'ivar_get';

  procedure Svar_set(svar:Smallint ); stdcall; external __WRAPDLLNAME name 'svar_set';

  function Svar_get( ):Smallint; stdcall; external __WRAPDLLNAME name 'svar_get';

  procedure Lvar_set(lvar:Longword ); stdcall; external __WRAPDLLNAME name 'lvar_set';

  function Lvar_get( ):Longword; stdcall; external __WRAPDLLNAME name 'lvar_get';

  procedure Uivar_set(uivar:Cardinal ); stdcall; external __WRAPDLLNAME name 'uivar_set';

  function Uivar_get( ):Cardinal; stdcall; external __WRAPDLLNAME name 'uivar_get';

  procedure Usvar_set(usvar:Word ); stdcall; external __WRAPDLLNAME name 'usvar_set';

  function Usvar_get( ):Word; stdcall; external __WRAPDLLNAME name 'usvar_get';

  procedure Ulvar_set(ulvar:Longint ); stdcall; external __WRAPDLLNAME name 'ulvar_set';

  function Ulvar_get( ):Longint; stdcall; external __WRAPDLLNAME name 'ulvar_get';

  procedure Scvar_set(scvar:ShortInt ); stdcall; external __WRAPDLLNAME name 'scvar_set';

  function Scvar_get( ):ShortInt; stdcall; external __WRAPDLLNAME name 'scvar_get';

  procedure Ucvar_set(ucvar:Byte ); stdcall; external __WRAPDLLNAME name 'ucvar_set';

  function Ucvar_get( ):Byte; stdcall; external __WRAPDLLNAME name 'ucvar_get';

  procedure Cvar_set(cvar:Char ); stdcall; external __WRAPDLLNAME name 'cvar_set';

  function Cvar_get( ):Char; stdcall; external __WRAPDLLNAME name 'cvar_get';

  procedure Fvar_set(fvar:single ); stdcall; external __WRAPDLLNAME name 'fvar_set';

  function Fvar_get( ):single; stdcall; external __WRAPDLLNAME name 'fvar_get';

  procedure Dvar_set(dvar:Double ); stdcall; external __WRAPDLLNAME name 'dvar_set';

  function Dvar_get( ):Double; stdcall; external __WRAPDLLNAME name 'dvar_get';

  procedure Strvar_set( strvar:PChar ); stdcall; external __WRAPDLLNAME name 'strvar_set';

  function Strvar_get( ):PChar; stdcall; external __WRAPDLLNAME name 'strvar_get';

  function Cstrvar_get( ):PChar; stdcall; external __WRAPDLLNAME name 'cstrvar_get';

  procedure Iptrvar_set( iptrvar:PInteger ); stdcall; external __WRAPDLLNAME name 'iptrvar_set';

  function Iptrvar_get( ):PInteger; stdcall; external __WRAPDLLNAME name 'iptrvar_get';

  procedure Name_set( name:PChar ); stdcall; external __WRAPDLLNAME name 'name_set';

  function Name_get( ):PChar; stdcall; external __WRAPDLLNAME name 'name_get';

  procedure Ptptr_set( ptptr:CPPoint ); stdcall; external __WRAPDLLNAME name 'ptptr_set';

  function Ptptr_get( ):CPPoint; stdcall; external __WRAPDLLNAME name 'ptptr_get';

  procedure Pt_set( pt:CPPoint ); stdcall; external __WRAPDLLNAME name 'pt_set';

  function Pt_get( ):CPPoint; stdcall; external __WRAPDLLNAME name 'pt_get';

  function Status_get( ):Integer; stdcall; external __WRAPDLLNAME name 'status_get';

  function Path_get( ):PChar; stdcall; external __WRAPDLLNAME name 'path_get';

  procedure Print_vars( ); stdcall; external __WRAPDLLNAME name '__print_vars';

  function New_int(value:Integer ):PInteger; stdcall; external __WRAPDLLNAME name '__new_int';

  function Make_Point( x, y:Integer ):CPPoint; stdcall; external __WRAPDLLNAME name '__make_Point';

  function Point_print( p:CPPoint ):PChar; stdcall; external __WRAPDLLNAME name '__Point_print';

  procedure Pt_print( ); stdcall; external __WRAPDLLNAME name '__pt_print';

{$ifdef example_FUNCTION_WRAPPER}

// implementation_functions_wrapper

  procedure Point_x_set( self:CPPoint; x:Integer ); stdcall; external __WRAPDLLNAME name 'Point_x_set';

  function Point_x_get( self:CPPoint ):Integer; stdcall; external __WRAPDLLNAME name 'Point_x_get';

  procedure Point_y_set( self:CPPoint; y:Integer ); stdcall; external __WRAPDLLNAME name 'Point_y_set';

  function Point_y_get( self:CPPoint ):Integer; stdcall; external __WRAPDLLNAME name 'Point_y_get';

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

procedure TPoint.SetX ( value: Integer);
begin
  assert(FCObjPtr <> nil);
 example.Point_x_set(Self.FCObjPtr, value);
end;

function TPoint.GetX (): Integer;
begin
  assert(FCObjPtr <> nil);
  Result := example.Point_x_get(Self.FCObjPtr) ;
end;

procedure TPoint.SetY ( value: Integer);
begin
  assert(FCObjPtr <> nil);
 example.Point_y_set(Self.FCObjPtr, value);
end;

function TPoint.GetY (): Integer;
begin
  assert(FCObjPtr <> nil);
  Result := example.Point_y_get(Self.FCObjPtr) ;
end;

constructor TPoint.Create ();
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Point();
end;

destructor TPoint.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Point(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TPoint.SetCObjPtr(Value : CPPoint);
begin
  if (Value <> FCObjPtr) then begin
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Point(FCObjPtr);
  end;
  FCObjPtr := Value;
  end;
end;








































{$endif} //example_CLASS_WRAPPER

initialization


// constant_initialization

// initialization


finalization

// finalization


end.
