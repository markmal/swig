(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;

{$mode objfpc}{$H+}

{$define example_FUNCTION_WRAPPER}
{$define example_CLASS_WRAPPER}

interface

uses 

// interface_uses


     Classes,
     SysUtils;


// interface_uses



// interface_type_begin 


//pasraw_intf.f

type
  CPShape = pointer;

type
  CPCircle = pointer;

type
  CPSquare = pointer;

// interface_type_end 



// interface_functions

  procedure Delete_Shape( self:CPShape ); stdcall;

  procedure Shape_testbool( self:CPShape; b:LongBool ); stdcall;

  procedure Shape_move( self:CPShape;  dx, dy:Double ); stdcall;

  function Shape_area( self:CPShape ):Double; stdcall;

  function Shape_perimeter( self:CPShape ):Double; stdcall;

  procedure Shape_nshapes_set(Shape_nshapes:Integer ); stdcall;

  function Shape_nshapes_get( ):Integer; stdcall;

  function New_Circle(r:Double ):CPCircle; stdcall;

  function Circle_area( self:CPCircle ):Double; stdcall;

  function Circle_perimeter( self:CPCircle ):Double; stdcall;

  procedure Delete_Circle( self:CPCircle ); stdcall;

  function New_Square(w:Double ):CPSquare; stdcall;

  function Square_area( self:CPSquare ):Double; stdcall;

  function Square_perimeter( self:CPSquare ):Double; stdcall;

  procedure Delete_Square( self:CPSquare ); stdcall;

{$ifdef example_FUNCTION_WRAPPER}

// interface_functions_wrapper

  procedure Shape_x_set( self:CPShape; x:Double ); stdcall;

  function Shape_x_get( self:CPShape ):Double; stdcall;

  procedure Shape_y_set( self:CPShape; y:Double ); stdcall;

  function Shape_y_get( self:CPShape ):Double; stdcall;

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

type

  TShape = class (TObject)

    private
      FCObjPtr : CPShape;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : CPShape);
    
    public

    constructor Create; overload; virtual;
    constructor Create(CObjPtr:CPShape; OwnObj:boolean); overload; 

    procedure SetX ( value: Double);

    function GetX (): Double;

 public                  
	property X : Double read GetX write SetX;

    procedure SetY ( value: Double);

    function GetY (): Double;

 public                  
	property Y : Double read GetY write SetY;

    procedure testbool ( b: LongBool);

    procedure move ( dx: Double;  dy: Double);

    function area (): Double;virtual; 

    function perimeter (): Double;virtual; 

    class procedure SetNshapes ( Shape_nshapes: Integer);

    class function GetNshapes (): Integer;

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : CPShape read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end; {TShape}

  TCircle = class (TShape) 
    public

    constructor Create ( r: Double);overload; 

    function area (): Double;override; 

    function perimeter (): Double;override; 

    destructor Destroy; override;

  //various other methods
  //proxy class methods
  end; {TCircle}

  TSquare = class (TShape) 
    public

    constructor Create ( w: Double);overload; 

    function area (): Double;override; 

    function perimeter (): Double;override; 

    destructor Destroy; override;

  //various other methods
  //proxy class methods
  end; {TSquare}

{$endif} //example_CLASS_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


// implementation_type_begin



// implementation_uses

// implementation_type_end

// implementation_functions

{$IFDEF LINUX}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF MSWINDOWS}
{$linklib example.dll}
const __WRAPDLLNAME= 'example_wrap.dll';
{$ENDIF}

{$IFDEF HAIKU}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF QTOPIA}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF DARWIN}
{$linklib example}
const __WRAPDLLNAME= '';
{$LINKFRAMEWORK example}
{$ENDIF}
 


  procedure Delete_Shape( self:CPShape ); stdcall; external __WRAPDLLNAME name 'delete_Shape';

  procedure Shape_testbool( self:CPShape; b:LongBool ); stdcall; external __WRAPDLLNAME name 'Shape_testbool';

  procedure Shape_move( self:CPShape;  dx, dy:Double ); stdcall; external __WRAPDLLNAME name 'Shape_move';

  function Shape_area( self:CPShape ):Double; stdcall; external __WRAPDLLNAME name 'Shape_area';

  function Shape_perimeter( self:CPShape ):Double; stdcall; external __WRAPDLLNAME name 'Shape_perimeter';

  procedure Shape_nshapes_set(Shape_nshapes:Integer ); stdcall; external __WRAPDLLNAME name 'Shape_nshapes_set';

  function Shape_nshapes_get( ):Integer; stdcall; external __WRAPDLLNAME name 'Shape_nshapes_get';

  function New_Circle(r:Double ):CPCircle; stdcall; external __WRAPDLLNAME name 'new_Circle';

  function Circle_area( self:CPCircle ):Double; stdcall; external __WRAPDLLNAME name 'Circle_area';

  function Circle_perimeter( self:CPCircle ):Double; stdcall; external __WRAPDLLNAME name 'Circle_perimeter';

  procedure Delete_Circle( self:CPCircle ); stdcall; external __WRAPDLLNAME name 'delete_Circle';

  function New_Square(w:Double ):CPSquare; stdcall; external __WRAPDLLNAME name 'new_Square';

  function Square_area( self:CPSquare ):Double; stdcall; external __WRAPDLLNAME name 'Square_area';

  function Square_perimeter( self:CPSquare ):Double; stdcall; external __WRAPDLLNAME name 'Square_perimeter';

  procedure Delete_Square( self:CPSquare ); stdcall; external __WRAPDLLNAME name 'delete_Square';

{$ifdef example_FUNCTION_WRAPPER}

// implementation_functions_wrapper

  procedure Shape_x_set( self:CPShape; x:Double ); stdcall; external __WRAPDLLNAME name 'Shape_x_set';

  function Shape_x_get( self:CPShape ):Double; stdcall; external __WRAPDLLNAME name 'Shape_x_get';

  procedure Shape_y_set( self:CPShape; y:Double ); stdcall; external __WRAPDLLNAME name 'Shape_y_set';

  function Shape_y_get( self:CPShape ):Double; stdcall; external __WRAPDLLNAME name 'Shape_y_get';

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

procedure TShape.SetX ( value: Double);
begin
  assert(FCObjPtr <> nil);
 example.Shape_x_set(Self.FCObjPtr, value);
end;

function TShape.GetX (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Shape_x_get(Self.FCObjPtr) ;
end;

procedure TShape.SetY ( value: Double);
begin
  assert(FCObjPtr <> nil);
 example.Shape_y_set(Self.FCObjPtr, value);
end;

function TShape.GetY (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Shape_y_get(Self.FCObjPtr) ;
end;

procedure TShape.testbool ( b: LongBool);
begin
  assert(FCObjPtr <> nil);
 example.Shape_testbool(Self.FCObjPtr, b  );
end;

procedure TShape.move ( dx: Double;  dy: Double);
begin
  assert(FCObjPtr <> nil);
 example.Shape_move(Self.FCObjPtr, dx, dy);
end;

function TShape.area (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Shape_area(Self.FCObjPtr) ;
end;

function TShape.perimeter (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Shape_perimeter(Self.FCObjPtr) ;
end;

class procedure TShape.SetNshapes ( Shape_nshapes: Integer);
begin

 example.Shape_nshapes_set(Shape_nshapes);
end;

class function TShape.GetNshapes (): Integer;
begin

  Result := example.Shape_nshapes_get() ;
end;

constructor TShape.Create; 
begin
  inherited Create;
  FCObjPtr := nil;
  FOwnCObjPtr := true
end;

constructor TShape.Create(CObjPtr:CPShape; OwnObj:boolean); 
begin
  inherited Create;
  FCObjPtr := CObjPtr;
  FOwnCObjPtr := OwnObj
end;


destructor TShape.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Shape(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TShape.SetCObjPtr(Value : CPShape);
begin
  if (Value <> FCObjPtr) then begin
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Shape(FCObjPtr);
  end;
  FCObjPtr := Value;
  end;
end;


constructor TCircle.Create ( r: Double);
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Circle(r);
end;

function TCircle.area (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Circle_area(Self.FCObjPtr) ;
end;

function TCircle.perimeter (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Circle_perimeter(Self.FCObjPtr) ;
end;

destructor TCircle.Destroy;
begin   
  if (FCObjPtr <> nil) and FOwnCObjPtr then begin 
    example.delete_Circle(FCObjPtr);
    FOwnCObjPtr := false;
  end;  
  FCObjPtr := nil; 
  inherited Destroy;
end;


constructor TSquare.Create ( w: Double);
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Square(w);
end;

function TSquare.area (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Square_area(Self.FCObjPtr) ;
end;

function TSquare.perimeter (): Double;
begin
  assert(FCObjPtr <> nil);
  Result := example.Square_perimeter(Self.FCObjPtr) ;
end;

destructor TSquare.Destroy;
begin   
  if (FCObjPtr <> nil) and FOwnCObjPtr then begin 
    example.delete_Square(FCObjPtr);
    FOwnCObjPtr := false;
  end;  
  FCObjPtr := nil; 
  inherited Destroy;
end;


{$endif} //example_CLASS_WRAPPER

initialization


// constant_initialization

// initialization


finalization

// finalization


end.
