(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;

{$mode objfpc}{$H+}
{$define example_FUNCTION_WRAPPER}

{$define example_CLASS_WRAPPER}

interface

uses 

uses swigtypes;

     Classes,
     SysUtils;


uses swigtypes;


//interface_type_begin

//pasraw_intf.f

//interface_type_end


  function Gcd (x, y: Integer): Integer; stdcall;

  procedure Foo_set (Foo: Double); stdcall;

  function Foo_get (): Double; stdcall;

{$ifdef example_CLASS_WRAPPER}

{$endif} //example_CLASS_WRAPPER

{$ifdef example_FUNCTION_WRAPPER}

// Functions Wrapper 


{$endif} //example_FUNCTION_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


{$IFDEF LINUX}
const __DLLNAME= 'libexample.so';


const __WRAPDLLNAME= 'libexample.so';


{$ENDIF}
{$IFDEF MSWINDOWS}
const __DLLNAME= 'example.dll';


const __WRAPDLLNAME= 'example.dll';


{$ENDIF}
{$IFDEF HAIKU}
const __DLLNAME= 'libexample.so';


const __WRAPDLLNAME= 'libexample.so';


{$ENDIF}
{$IFDEF QTOPIA}
const __DLLNAME= 'libexample.so';


const __WRAPDLLNAME= 'libexample.so';


{$ENDIF}
{$IFDEF DARWIN}
const __DLLNAME= '';


const __WRAPDLLNAME= '';


{$LINKFRAMEWORK example}
{$ENDIF}
  function Gcd (x, y: Integer): Integer; stdcall; external __DLLNAME name 'gcd';

  procedure Foo_set (Foo: Double); stdcall; external __DLLNAME name 'Foo_set';

  function Foo_get (): Double; stdcall; external __DLLNAME name 'Foo_get';

{$ifdef example_FUNCTION_WRAPPER}

// Functions Wrapper 


{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}



{$endif} //example_CLASS_WRAPPER

initialization



// constant initialization



//initialization


finalization


//finalization


end.
