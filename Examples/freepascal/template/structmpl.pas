(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit structmpl;

{$mode objfpc}{$H+}

{$define structmpl_FUNCTION_WRAPPER}
{$define structmpl_CLASS_WRAPPER}

interface



// interface_uses



// interface_type_begin 


//pasraw_intf.f

type
   qptrdiff = type pointer;
   PqptrdiffArray = ^qptrdiffArray_;
   qptrdiffArray_=array[0..(MaxInt div sizeof(qptrdiff))-1] of qptrdiff;

const
   QStr_Constant = QStr::Constant ;

type
  CPQStr = pointer;

const
   QAtomicAdditiveType_int_AddScaleS = QAtomicAdditiveType< int >::AddScaleS ;

type
  CPQAtomicAdditiveType_int = pointer;

// interface_type_end 



// interface_functions

  function New_QStr( ):CPQStr; stdcall;

  procedure Delete_QStr( self:CPQStr ); stdcall;

  function New_QAtomicAdditiveType_int( ):CPQAtomicAdditiveType_int; stdcall;

  procedure Delete_QAtomicAdditiveType_int( self:CPQAtomicAdditiveType_int ); stdcall;

{$ifdef structmpl_FUNCTION_WRAPPER}

// interface_functions_wrapper

{$endif} //structmpl_FUNCTION_WRAPPER

{$ifdef structmpl_CLASS_WRAPPER}

type

  TQStr = class (TObject)

    private
      FCObjPtr : CPQStr;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : CPQStr);
    
    public

    constructor Create ();overload; 

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : CPQStr read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end; {TQStr}

  TQAtomicAdditiveType_int = class (TObject)

    private
      FCObjPtr : CPQAtomicAdditiveType_int;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : CPQAtomicAdditiveType_int);
    
    public

    constructor Create ();overload; 

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : CPQAtomicAdditiveType_int read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end; {TQAtomicAdditiveType_int}

{$endif} //structmpl_CLASS_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


// implementation_type_begin



// implementation_uses

// implementation_type_end

// implementation_functions

{$IFDEF LINUX}
{$linklib libstructmpl.so}
const __WRAPDLLNAME= 'libstructmpl_wrap.so';
{$ENDIF}

{$IFDEF MSWINDOWS}
{$linklib structmpl.dll}
const __WRAPDLLNAME= 'structmpl_wrap.dll';
{$ENDIF}

{$IFDEF HAIKU}
{$linklib libstructmpl.so}
const __WRAPDLLNAME= 'libstructmpl_wrap.so';
{$ENDIF}

{$IFDEF QTOPIA}
{$linklib libstructmpl.so}
const __WRAPDLLNAME= 'libstructmpl_wrap.so';
{$ENDIF}

{$IFDEF DARWIN}
{$linklib structmpl}
const __WRAPDLLNAME= '';
{$LINKFRAMEWORK structmpl}
{$ENDIF}
 


  function New_QStr( ):CPQStr; stdcall; external __WRAPDLLNAME name 'new_QStr';

  procedure Delete_QStr( self:CPQStr ); stdcall; external __WRAPDLLNAME name 'delete_QStr';

  function New_QAtomicAdditiveType_int( ):CPQAtomicAdditiveType_int; stdcall; external __WRAPDLLNAME name 'new_QAtomicAdditiveType_int';

  procedure Delete_QAtomicAdditiveType_int( self:CPQAtomicAdditiveType_int ); stdcall; external __WRAPDLLNAME name 'delete_QAtomicAdditiveType_int';

{$ifdef structmpl_FUNCTION_WRAPPER}

// implementation_functions_wrapper

{$endif} //structmpl_FUNCTION_WRAPPER

{$ifdef structmpl_CLASS_WRAPPER}

constructor TQStr.Create ();
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := structmpl.New_QStr();
end;

destructor TQStr.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    structmpl.delete_QStr(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TQStr.SetCObjPtr(Value : CPQStr);
begin
  if (Value <> FCObjPtr) then begin
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    structmpl.delete_QStr(FCObjPtr);
  end;
  FCObjPtr := Value;
  end;
end;


constructor TQAtomicAdditiveType_int.Create ();
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := structmpl.New_QAtomicAdditiveType_int();
end;

destructor TQAtomicAdditiveType_int.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    structmpl.delete_QAtomicAdditiveType_int(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TQAtomicAdditiveType_int.SetCObjPtr(Value : CPQAtomicAdditiveType_int);
begin
  if (Value <> FCObjPtr) then begin
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    structmpl.delete_QAtomicAdditiveType_int(FCObjPtr);
  end;
  FCObjPtr := Value;
  end;
end;


{$endif} //structmpl_CLASS_WRAPPER

initialization


// constant_initialization

// initialization


finalization

// finalization


end.
