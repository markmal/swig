(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;

{$mode objfpc}{$H+}

{$define example_FUNCTION_WRAPPER}
{$define example_CLASS_WRAPPER}

interface

uses 

// interface_uses


     Classes,
     SysUtils;


// interface_uses



// interface_type_begin 


//pasraw_intf.f

type
  CPvecint = pointer;

// interface_type_end 



// interface_functions

  function maxint( a, b:Integer ):Integer; stdcall;

  function maxdouble( a, b:Double ):Double; stdcall;

  function New_vecint(_sz:Integer ):CPvecint; stdcall;

  function Vecint_get( self:CPvecint; index:Integer ):PInteger; stdcall;

  procedure Vecint__set( self:CPvecint; index:Integer;  val:Integer ); stdcall;

  function Vecint_getitem( self:CPvecint; index:Integer ):Integer; stdcall;

  procedure Vecint_setitem( self:CPvecint;  index, val:Integer ); stdcall;

  procedure Delete_vecint( self:CPvecint ); stdcall;

{$ifdef example_FUNCTION_WRAPPER}

// interface_functions_wrapper

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

type

  Tvecint = class (TObject)

    private
      FCObjPtr : CPvecint;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : CPvecint);
    
    public

    constructor Create; overload; virtual;
    constructor Create(CObjPtr:CPvecint; OwnObj:boolean); overload; 

    constructor Create ( _sz: Integer);overload; 

    function get ( index: Integer): PInteger;

    procedure _set ( index: Integer; var val: Integer);

    function getitem ( index: Integer): Integer;

    procedure setitem ( index: Integer;  val: Integer);

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : CPvecint read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end; {Tvecint}

{$endif} //example_CLASS_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


// implementation_type_begin



// implementation_uses

// implementation_type_end

// implementation_functions

{$IFDEF LINUX}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF MSWINDOWS}
{$linklib example.dll}
const __WRAPDLLNAME= 'example_wrap.dll';
{$ENDIF}

{$IFDEF HAIKU}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF QTOPIA}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF DARWIN}
{$linklib example}
const __WRAPDLLNAME= '';
{$LINKFRAMEWORK example}
{$ENDIF}
 


  function maxint( a, b:Integer ):Integer; stdcall; external __WRAPDLLNAME name '__maxint';

  function maxdouble( a, b:Double ):Double; stdcall; external __WRAPDLLNAME name '__maxdouble';

  function New_vecint(_sz:Integer ):CPvecint; stdcall; external __WRAPDLLNAME name 'new_vecint';

  function Vecint_get( self:CPvecint; index:Integer ):PInteger; stdcall; external __WRAPDLLNAME name 'vecint_get';

  procedure Vecint__set( self:CPvecint; index:Integer;  val:Integer ); stdcall; external __WRAPDLLNAME name 'vecint__set';

  function Vecint_getitem( self:CPvecint; index:Integer ):Integer; stdcall; external __WRAPDLLNAME name 'vecint_getitem';

  procedure Vecint_setitem( self:CPvecint;  index, val:Integer ); stdcall; external __WRAPDLLNAME name 'vecint_setitem';

  procedure Delete_vecint( self:CPvecint ); stdcall; external __WRAPDLLNAME name 'delete_vecint';

{$ifdef example_FUNCTION_WRAPPER}

// implementation_functions_wrapper

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

constructor Tvecint.Create ( _sz: Integer);
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_vecint(_sz);
end;

function Tvecint.get ( index: Integer): PInteger;
begin
  assert(FCObjPtr <> nil);
  Result := example.Vecint_get(Self.FCObjPtr, index) ;
end;

procedure Tvecint._set ( index: Integer; var val: Integer);

begin
  assert(FCObjPtr <> nil);

 example.Vecint__set(Self.FCObjPtr, index, val);

end;

function Tvecint.getitem ( index: Integer): Integer;
begin
  assert(FCObjPtr <> nil);
  Result := example.Vecint_getitem(Self.FCObjPtr, index) ;
end;

procedure Tvecint.setitem ( index: Integer;  val: Integer);
begin
  assert(FCObjPtr <> nil);
 example.Vecint_setitem(Self.FCObjPtr, index, val);
end;

constructor Tvecint.Create; 
begin
  inherited Create;
  FCObjPtr := nil;
  FOwnCObjPtr := true
end;

constructor Tvecint.Create(CObjPtr:CPvecint; OwnObj:boolean); 
begin
  inherited Create;
  FCObjPtr := CObjPtr;
  FOwnCObjPtr := OwnObj
end;


destructor Tvecint.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_vecint(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure Tvecint.SetCObjPtr(Value : CPvecint);
begin
  if (Value <> FCObjPtr) then begin
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_vecint(FCObjPtr);
  end;
  FCObjPtr := Value;
  end;
end;


{$endif} //example_CLASS_WRAPPER

initialization


// constant_initialization

// initialization


finalization

// finalization


end.
