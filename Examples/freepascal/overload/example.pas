(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;

{$mode objfpc}{$H+}

{$define example_FUNCTION_WRAPPER}
{$define example_CLASS_WRAPPER}

interface

uses 

// interface_uses


     Classes,
     SysUtils;


// interface_uses



// interface_type_begin 


//pasraw_intf.f

type
  CPFoo = pointer;

// interface_type_end 



// interface_functions

  procedure Foo(x:Integer ); stdcall; overload;

  procedure Foo( x:PChar ); stdcall; overload;

  function New_Foo( ):CPFoo; stdcall; overload;

  function New_Foo(const arg0:CPFoo ):CPFoo; stdcall; overload;

  procedure Foo_bar( self:CPFoo; x:Integer ); stdcall; overload;

  procedure Foo_bar( self:CPFoo;  s:PChar; y:Integer ); stdcall; overload;

  procedure Delete_Foo( self:CPFoo ); stdcall;

{$ifdef example_FUNCTION_WRAPPER}

// interface_functions_wrapper

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

type

  TFoo = class (TObject)

    private
      FCObjPtr : CPFoo;
      FOwnCObjPtr : boolean;
    
    protected
      procedure SetCObjPtr(Value : CPFoo);
    
    public

    constructor Create ();overload; 

    constructor Create (const arg0: TFoo);overload; 

    procedure bar ( x: Integer);overload; 

    procedure bar ( s: Tchar;  y: Integer);overload; 

    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : CPFoo read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end; {TFoo}

{$endif} //example_CLASS_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


// implementation_type_begin



// implementation_uses

// implementation_type_end

// implementation_functions

{$IFDEF LINUX}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF MSWINDOWS}
{$linklib example.dll}
const __WRAPDLLNAME= 'example_wrap.dll';
{$ENDIF}

{$IFDEF HAIKU}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF QTOPIA}
{$linklib libexample.so}
const __WRAPDLLNAME= 'libexample_wrap.so';
{$ENDIF}

{$IFDEF DARWIN}
{$linklib example}
const __WRAPDLLNAME= '';
{$LINKFRAMEWORK example}
{$ENDIF}
 


  procedure Foo(x:Integer ); stdcall; overload; external __WRAPDLLNAME name '__foo__SWIG_0';

  procedure Foo( x:PChar ); stdcall; overload; external __WRAPDLLNAME name '__foo__SWIG_1';

  function New_Foo( ):CPFoo; stdcall; overload; external __WRAPDLLNAME name 'new_Foo__SWIG_0';

  function New_Foo(const arg0:CPFoo ):CPFoo; stdcall; overload; external __WRAPDLLNAME name 'new_Foo__SWIG_1';

  procedure Foo_bar( self:CPFoo; x:Integer ); stdcall; overload; external __WRAPDLLNAME name 'Foo_bar__SWIG_0';

  procedure Foo_bar( self:CPFoo;  s:PChar; y:Integer ); stdcall; overload; external __WRAPDLLNAME name 'Foo_bar__SWIG_1';

  procedure Delete_Foo( self:CPFoo ); stdcall; external __WRAPDLLNAME name 'delete_Foo';

{$ifdef example_FUNCTION_WRAPPER}

// implementation_functions_wrapper

{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

constructor TFoo.Create ();
begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Foo();
end;

constructor TFoo.Create (const arg0: TFoo);
var arg1 : CPFoo;
begin
  inherited Create;
  FOwnCObjPtr := true;
  arg1 := arg0.CObjPtr;
   FCObjPtr := example.New_Foo(arg1);
  arg0.CObjPtr := arg1 ;
end;

procedure TFoo.bar ( x: Integer);
begin
  assert(FCObjPtr <> nil);
 example.Foo_bar(Self.FCObjPtr, x);
end;

procedure TFoo.bar ( s: Tchar;  y: Integer);

begin
  assert(FCObjPtr <> nil);
 example.Foo_bar(Self.FCObjPtr, s, y);

end;

destructor TFoo.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Foo(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TFoo.SetCObjPtr(Value : CPFoo);
begin
  if (Value <> FCObjPtr) then begin
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Foo(FCObjPtr);
  end;
  FCObjPtr := Value;
  end;
end;


{$endif} //example_CLASS_WRAPPER

initialization


// constant_initialization

// initialization


finalization

// finalization


end.
