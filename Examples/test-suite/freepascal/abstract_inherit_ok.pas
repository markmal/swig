(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit abstract_inherit_ok;

{$mode objfpc}{$H+}
{$define abstract_inherit_ok_FUNCTION_WRAPPER}

{$define abstract_inherit_ok_CLASS_WRAPPER}

interface



uses swigtypes;


//interface_type_begin

//pasraw_intf.f

type

Foo = class;

type

Spam = class;

//interface_type_end


  procedure Delete_Foo ( self: Foo); stdcall;

  function Foo_blah ( self: Foo): Integer; stdcall;

  function New_Spam (): Spam; stdcall;

  procedure Delete_Spam ( self: Spam); stdcall;

{$ifdef abstract_inherit_ok_CLASS_WRAPPER}

type

  TFoo = class (TObject, IUnknown)

  private
    FCObjPtr : Foo;
    FOwnCObjPtr : boolean;

  protected
	procedure SetCObjPtr(Value : Foo);
  // IUnknown
    function _AddRef : integer; stdcall;
    function _Release: integer; stdcall;
    function QueryInterface(const GUID:TGUID; out Intf): HRESULT; stdcall;
 public
  Foo = class 	FCObjPtr : pointer;
	FOwnCObjPtr : boolean;

    constructor Create; overload; virtual;
    constructor Create(CObj:Foo; OwnObj:boolean); overload; 

    function blah (): Integer;virtual; 
  // tm_def:
    destructor Destroy; override;


    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : Foo read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end;
  TSpam = class (TFoo) 
  public
  Spam = class (Foo)

    constructor Create ();overload; 
  // tm_def:
    destructor Destroy; override;


    destructor Destroy; override;

  //various other methods
  //proxy class methods
  end;
{$endif} //abstract_inherit_ok_CLASS_WRAPPER

{$ifdef abstract_inherit_ok_FUNCTION_WRAPPER}

// Functions Wrapper 


{$endif} //abstract_inherit_ok_FUNCTION_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


{$IFDEF LINUX}
const __DLLNAME= 'libabstract_inherit_ok.so';


const __WRAPDLLNAME= 'libabstract_inherit_ok.so';


{$ENDIF}
{$IFDEF MSWINDOWS}
const __DLLNAME= 'abstract_inherit_ok.dll';


const __WRAPDLLNAME= 'abstract_inherit_ok.dll';


{$ENDIF}
{$IFDEF HAIKU}
const __DLLNAME= 'libabstract_inherit_ok.so';


const __WRAPDLLNAME= 'libabstract_inherit_ok.so';


{$ENDIF}
{$IFDEF QTOPIA}
const __DLLNAME= 'libabstract_inherit_ok.so';


const __WRAPDLLNAME= 'libabstract_inherit_ok.so';


{$ENDIF}
{$IFDEF DARWIN}
const __DLLNAME= '';


const __WRAPDLLNAME= '';


{$LINKFRAMEWORK abstract_inherit_ok}
{$ENDIF}
  procedure Delete_Foo ( self: Foo); stdcall; external __DLLNAME name 'delete_Foo';

  function Foo_blah ( self: Foo): Integer; stdcall; external __DLLNAME name 'Foo_blah';

  function New_Spam (): Spam; stdcall; external __DLLNAME name 'new_Spam';

  procedure Delete_Spam ( self: Spam); stdcall; external __DLLNAME name 'delete_Spam';

{$ifdef abstract_inherit_ok_FUNCTION_WRAPPER}

// Functions Wrapper 


{$endif} //abstract_inherit_ok_FUNCTION_WRAPPER

{$ifdef abstract_inherit_ok_CLASS_WRAPPER}

function Foo.blah (): Integer;begin
  assert(FCObjPtr <> nil);
  Result := abstract_inherit_ok.Foo_blah(Self.FCObjPtr) ;
end;


function TFoo._AddRef : integer;
begin
   Result := -1;
end;

function TFoo._Release: integer;
begin
   Result := -1;
end;

function TFoo.QueryInterface(const GUID:TGUID; out Intf): HRESULT;
begin
   if GetInterface(GUID, Intf) then
      Result := S_OK
   else
      Result := S_FALSE	;
end;

constructor TFoo.Create; 
begin
  inherited Create;
  FCObjPtr := nil;
  FOwnCObjPtr := true
end;

constructor TFoo.Create(CObj:Foo; OwnObj:boolean); 
begin
  inherited Create;
  FCObjPtr := CObj;
  FOwnCObjPtr := OwnObj
end;


destructor TFoo.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    abstract_inherit_ok.delete_Foo(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TFoo.SetCObjPtr(Value : Foo);
begin
  if (Value <> FCObjPtr) then begin
	if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
		abstract_inherit_ok.delete_Foo(FCObjPtr);
	end;
	FCObjPtr := Value;
  end;
end;


constructor Spam.Create ();begin
  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := abstract_inherit_ok.New_Spam();
end;

destructor TSpam.Destroy;
begin   
  if (FCObjPtr  <> nil) and  FOwnCObjPtr then begin 
    abstract_inherit_ok.delete_Spam(FCObjPtr);
    FOwnCObjPtr := false;
  end;  
  FCObjPtr := nil; 
  inherited Destroy;
end;


{$endif} //abstract_inherit_ok_CLASS_WRAPPER

initialization



// constant initialization



//initialization


finalization


//finalization


end.
