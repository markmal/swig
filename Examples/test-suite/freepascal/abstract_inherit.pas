(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit abstract_inherit;

{$mode objfpc}{$H+}
{$define abstract_inherit_FUNCTION_WRAPPER}

{$define abstract_inherit_CLASS_WRAPPER}

interface



uses swigtypes;


//interface_type_begin

//pasraw_intf.f

type

Foo = class;

type

Bar = class;

type

Spam = class;

type

NRFilter_i = class;

type

NRRCFilter_i = class;

type

NRRCFilterpro_i = class;

type

NRRCFilterpri_i = class;

//interface_type_end


  procedure Delete_Foo ( self: Foo); stdcall;

  function Foo_blah ( self: Foo): Integer; stdcall;

  procedure Delete_Bar ( self: Bar); stdcall;

  procedure Delete_Spam ( self: Spam); stdcall;

  procedure Delete_NRFilter_i ( self: NRFilter< int >); stdcall;

  procedure Delete_NRRCFilter_i ( self: NRRCFilter< int >); stdcall;

  procedure Delete_NRRCFilterpro_i ( self: NRRCFilterpro< int >); stdcall;

  procedure Delete_NRRCFilterpri_i ( self: NRRCFilterpri< int >); stdcall;

{$ifdef abstract_inherit_CLASS_WRAPPER}

type

  TFoo = class (TObject, IUnknown)

  private
    FCObjPtr : Foo;
    FOwnCObjPtr : boolean;

  protected
	procedure SetCObjPtr(Value : Foo);
  // IUnknown
    function _AddRef : integer; stdcall;
    function _Release: integer; stdcall;
    function QueryInterface(const GUID:TGUID; out Intf): HRESULT; stdcall;
 public
  Foo = class 	FCObjPtr : pointer;
	FOwnCObjPtr : boolean;

    constructor Create; overload; virtual;
    constructor Create(CObj:Foo; OwnObj:boolean); overload; 

    function blah (): Integer;virtual; 
  // tm_def:
    destructor Destroy; override;


    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : Foo read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end;
  TBar = class (TFoo) 
  public
  Bar = class (Foo)
  // tm_def:
    destructor Destroy; override;


    destructor Destroy; override;

  //various other methods
  //proxy class methods
  end;
  TSpam = class (TFoo) 
  public
  Spam = class (Foo)
  // tm_def:
    destructor Destroy; override;


    destructor Destroy; override;

  //various other methods
  //proxy class methods
  end;
  TNRFilter_i = class (TObject, IUnknown)

  private
    FCObjPtr : NRFilter_i;
    FOwnCObjPtr : boolean;

  protected
	procedure SetCObjPtr(Value : NRFilter_i);
  // IUnknown
    function _AddRef : integer; stdcall;
    function _Release: integer; stdcall;
    function QueryInterface(const GUID:TGUID; out Intf): HRESULT; stdcall;
 public
  NRFilter_i = class 	FCObjPtr : pointer;
	FOwnCObjPtr : boolean;

    constructor Create; overload; virtual;
    constructor Create(CObj:NRFilter_i; OwnObj:boolean); overload; 
  // tm_def:
    destructor Destroy; override;


    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : NRFilter_i read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end;
  TNRRCFilter_i = class (TNRFilter_i) 
  public
  NRRCFilter_i = class (NRFilter_i)
  // tm_def:
    destructor Destroy; override;


    destructor Destroy; override;

  //various other methods
  //proxy class methods
  end;
  TNRRCFilterpro_i = class (TObject, IUnknown)

  private
    FCObjPtr : NRRCFilterpro_i;
    FOwnCObjPtr : boolean;

  protected
	procedure SetCObjPtr(Value : NRRCFilterpro_i);
  // IUnknown
    function _AddRef : integer; stdcall;
    function _Release: integer; stdcall;
    function QueryInterface(const GUID:TGUID; out Intf): HRESULT; stdcall;
 public
  NRRCFilterpro_i = class 	FCObjPtr : pointer;
	FOwnCObjPtr : boolean;

    constructor Create; overload; virtual;
    constructor Create(CObj:NRRCFilterpro_i; OwnObj:boolean); overload; 
  // tm_def:
    destructor Destroy; override;


    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : NRRCFilterpro_i read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end;
  TNRRCFilterpri_i = class (TObject, IUnknown)

  private
    FCObjPtr : NRRCFilterpri_i;
    FOwnCObjPtr : boolean;

  protected
	procedure SetCObjPtr(Value : NRRCFilterpri_i);
  // IUnknown
    function _AddRef : integer; stdcall;
    function _Release: integer; stdcall;
    function QueryInterface(const GUID:TGUID; out Intf): HRESULT; stdcall;
 public
  NRRCFilterpri_i = class 	FCObjPtr : pointer;
	FOwnCObjPtr : boolean;

    constructor Create; overload; virtual;
    constructor Create(CObj:NRRCFilterpri_i; OwnObj:boolean); overload; 
  // tm_def:
    destructor Destroy; override;


    destructor Destroy; override;

  //various other methods
  
  public  
    property CObjPtr : NRRCFilterpri_i read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;
  //proxy class methods
  end;
{$endif} //abstract_inherit_CLASS_WRAPPER

{$ifdef abstract_inherit_FUNCTION_WRAPPER}

// Functions Wrapper 


{$endif} //abstract_inherit_FUNCTION_WRAPPER
// Output a Pascal type wrapper class for each SWIG type
implementation


{$IFDEF LINUX}
const __DLLNAME= 'libabstract_inherit.so';


const __WRAPDLLNAME= 'libabstract_inherit.so';


{$ENDIF}
{$IFDEF MSWINDOWS}
const __DLLNAME= 'abstract_inherit.dll';


const __WRAPDLLNAME= 'abstract_inherit.dll';


{$ENDIF}
{$IFDEF HAIKU}
const __DLLNAME= 'libabstract_inherit.so';


const __WRAPDLLNAME= 'libabstract_inherit.so';


{$ENDIF}
{$IFDEF QTOPIA}
const __DLLNAME= 'libabstract_inherit.so';


const __WRAPDLLNAME= 'libabstract_inherit.so';


{$ENDIF}
{$IFDEF DARWIN}
const __DLLNAME= '';


const __WRAPDLLNAME= '';


{$LINKFRAMEWORK abstract_inherit}
{$ENDIF}
  procedure Delete_Foo ( self: Foo); stdcall; external __DLLNAME name 'delete_Foo';

  function Foo_blah ( self: Foo): Integer; stdcall; external __DLLNAME name 'Foo_blah';

  procedure Delete_Bar ( self: Bar); stdcall; external __DLLNAME name 'delete_Bar';

  procedure Delete_Spam ( self: Spam); stdcall; external __DLLNAME name 'delete_Spam';

  procedure Delete_NRFilter_i ( self: NRFilter< int >); stdcall; external __DLLNAME name 'delete_NRFilter_i';

  procedure Delete_NRRCFilter_i ( self: NRRCFilter< int >); stdcall; external __DLLNAME name 'delete_NRRCFilter_i';

  procedure Delete_NRRCFilterpro_i ( self: NRRCFilterpro< int >); stdcall; external __DLLNAME name 'delete_NRRCFilterpro_i';

  procedure Delete_NRRCFilterpri_i ( self: NRRCFilterpri< int >); stdcall; external __DLLNAME name 'delete_NRRCFilterpri_i';

{$ifdef abstract_inherit_FUNCTION_WRAPPER}

// Functions Wrapper 


{$endif} //abstract_inherit_FUNCTION_WRAPPER

{$ifdef abstract_inherit_CLASS_WRAPPER}

function Foo.blah (): Integer;begin
  assert(FCObjPtr <> nil);
  Result := abstract_inherit.Foo_blah(Self.FCObjPtr) ;
end;


function TFoo._AddRef : integer;
begin
   Result := -1;
end;

function TFoo._Release: integer;
begin
   Result := -1;
end;

function TFoo.QueryInterface(const GUID:TGUID; out Intf): HRESULT;
begin
   if GetInterface(GUID, Intf) then
      Result := S_OK
   else
      Result := S_FALSE	;
end;

constructor TFoo.Create; 
begin
  inherited Create;
  FCObjPtr := nil;
  FOwnCObjPtr := true
end;

constructor TFoo.Create(CObj:Foo; OwnObj:boolean); 
begin
  inherited Create;
  FCObjPtr := CObj;
  FOwnCObjPtr := OwnObj
end;


destructor TFoo.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    abstract_inherit.delete_Foo(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TFoo.SetCObjPtr(Value : Foo);
begin
  if (Value <> FCObjPtr) then begin
	if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
		abstract_inherit.delete_Foo(FCObjPtr);
	end;
	FCObjPtr := Value;
  end;
end;


destructor TBar.Destroy;
begin   
  if (FCObjPtr  <> nil) and  FOwnCObjPtr then begin 
    abstract_inherit.delete_Bar(FCObjPtr);
    FOwnCObjPtr := false;
  end;  
  FCObjPtr := nil; 
  inherited Destroy;
end;


destructor TSpam.Destroy;
begin   
  if (FCObjPtr  <> nil) and  FOwnCObjPtr then begin 
    abstract_inherit.delete_Spam(FCObjPtr);
    FOwnCObjPtr := false;
  end;  
  FCObjPtr := nil; 
  inherited Destroy;
end;



function TNRFilter_i._AddRef : integer;
begin
   Result := -1;
end;

function TNRFilter_i._Release: integer;
begin
   Result := -1;
end;

function TNRFilter_i.QueryInterface(const GUID:TGUID; out Intf): HRESULT;
begin
   if GetInterface(GUID, Intf) then
      Result := S_OK
   else
      Result := S_FALSE	;
end;

constructor TNRFilter_i.Create; 
begin
  inherited Create;
  FCObjPtr := nil;
  FOwnCObjPtr := true
end;

constructor TNRFilter_i.Create(CObj:NRFilter_i; OwnObj:boolean); 
begin
  inherited Create;
  FCObjPtr := CObj;
  FOwnCObjPtr := OwnObj
end;


destructor TNRFilter_i.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    abstract_inherit.delete_NRFilter_i(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TNRFilter_i.SetCObjPtr(Value : NRFilter_i);
begin
  if (Value <> FCObjPtr) then begin
	if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
		abstract_inherit.delete_NRFilter_i(FCObjPtr);
	end;
	FCObjPtr := Value;
  end;
end;


destructor TNRRCFilter_i.Destroy;
begin   
  if (FCObjPtr  <> nil) and  FOwnCObjPtr then begin 
    abstract_inherit.delete_NRRCFilter_i(FCObjPtr);
    FOwnCObjPtr := false;
  end;  
  FCObjPtr := nil; 
  inherited Destroy;
end;



function TNRRCFilterpro_i._AddRef : integer;
begin
   Result := -1;
end;

function TNRRCFilterpro_i._Release: integer;
begin
   Result := -1;
end;

function TNRRCFilterpro_i.QueryInterface(const GUID:TGUID; out Intf): HRESULT;
begin
   if GetInterface(GUID, Intf) then
      Result := S_OK
   else
      Result := S_FALSE	;
end;

constructor TNRRCFilterpro_i.Create; 
begin
  inherited Create;
  FCObjPtr := nil;
  FOwnCObjPtr := true
end;

constructor TNRRCFilterpro_i.Create(CObj:NRRCFilterpro_i; OwnObj:boolean); 
begin
  inherited Create;
  FCObjPtr := CObj;
  FOwnCObjPtr := OwnObj
end;


destructor TNRRCFilterpro_i.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    abstract_inherit.delete_NRRCFilterpro_i(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TNRRCFilterpro_i.SetCObjPtr(Value : NRRCFilterpro_i);
begin
  if (Value <> FCObjPtr) then begin
	if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
		abstract_inherit.delete_NRRCFilterpro_i(FCObjPtr);
	end;
	FCObjPtr := Value;
  end;
end;



function TNRRCFilterpri_i._AddRef : integer;
begin
   Result := -1;
end;

function TNRRCFilterpri_i._Release: integer;
begin
   Result := -1;
end;

function TNRRCFilterpri_i.QueryInterface(const GUID:TGUID; out Intf): HRESULT;
begin
   if GetInterface(GUID, Intf) then
      Result := S_OK
   else
      Result := S_FALSE	;
end;

constructor TNRRCFilterpri_i.Create; 
begin
  inherited Create;
  FCObjPtr := nil;
  FOwnCObjPtr := true
end;

constructor TNRRCFilterpri_i.Create(CObj:NRRCFilterpri_i; OwnObj:boolean); 
begin
  inherited Create;
  FCObjPtr := CObj;
  FOwnCObjPtr := OwnObj
end;


destructor TNRRCFilterpri_i.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    abstract_inherit.delete_NRRCFilterpri_i(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TNRRCFilterpri_i.SetCObjPtr(Value : NRRCFilterpri_i);
begin
  if (Value <> FCObjPtr) then begin
	if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
		abstract_inherit.delete_NRRCFilterpri_i(FCObjPtr);
	end;
	FCObjPtr := Value;
  end;
end;


{$endif} //abstract_inherit_CLASS_WRAPPER

initialization



// constant initialization



//initialization


finalization


//finalization


end.
